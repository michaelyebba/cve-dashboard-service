/**
 * 
 */
package com.yebba.cveservice.model;

import java.io.Serializable;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Objects;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * Common vulnerability and exposures (CVE) Pojo
 * 
 * @author myebba
 *
 */
public class Cve implements Serializable {

	/**
	 * Generated serialVersionUID
	 */
	private static final long serialVersionUID = -5949133332700151553L;
	
	private static final Log log = LogFactory.getLog(Cve.class);
	
	private String id;
	private Integer year;
	private String severity;
	private String category;
	private List<String> products;
	private String description;
	private String dateTime;

	/**
	 * Utility method to display a product summary
	 */
	public String getProductSummary() {
		if (getProducts() != null) {
			if (getProducts().size() == 1) {
				return getProducts().get(0);
			}
			if (getProducts().size() > 1) {
				
				StringBuilder sb = new StringBuilder();
				sb.append(getProducts().get(0))
				 .append( " (plus ")
				 .append(getProducts().size()-1)
				 .append( " more)");
				return sb.toString();
			}	
		}

		return "No products";
	}
	
	/**
	 * @return the year
	 */
	public Integer getYear() {
		return year;
	}

	/**
	 * @param year the year to set
	 */
	public void setYear(Integer year) {
		this.year = year;
	}

	/**
	 * @return the dateTime
	 */
	public String getDateTime() {
		return dateTime;
	}

	/**
	 * @param dateTime the dateTime to set
	 */
	public void setDateTime(String dateTime) {
		this.dateTime = dateTime;
	}

	/**
	 * Formats the dateTime string from the Cve Data Feed
	 * @return
	 */
	public Date getFormattedDate() {
		log.debug("formatting " + getDateTime());
		try {
			DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.mmmX");
			if (Objects.nonNull(getDateTime())) {
				return df.parse(getDateTime());
			}
		} catch (Exception e) {
			log.warn("Illegal date format; returning epoch datetime.");
		}
		return new Date(0);
	}

	/**
	 * Default constructor
	 */
	public Cve() {
		super();
	}

	/**
	 * @return the id
	 */
	public String getId() {
		return id;
	}

	/**
	 * @param id the id to set
	 */
	public void setId(String id) {
		this.id = id;
	}

	/**
	 * @return the severity
	 */
	public String getSeverity() {
		return severity;
	}

	/**
	 * @param severity the severity to set
	 */
	public void setSeverity(String severity) {
		this.severity = severity;
	}

	/**
	 * @return the category
	 */
	public String getCategory() {
		return category;
	}

	/**
	 * @param category the category to set
	 */
	public void setCategory(String category) {
		this.category = category;
	}

	/**
	 * @return the products
	 */
	public List<String> getProducts() {
		return products;
	}

	/**
	 * @param products the products to set
	 */
	public void setProducts(List<String> products) {
		this.products = products;
	}

	/**
	 * @return the description
	 */
	public String getDescription() {
		return description;
	}

	/**
	 * @param description the description to set
	 */
	public void setDescription(String description) {
		this.description = description;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((dateTime == null) ? 0 : dateTime.hashCode());
		result = prime * result + ((id == null) ? 0 : id.hashCode());
		return result;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Cve other = (Cve) obj;
		if (dateTime == null) {
			if (other.dateTime != null)
				return false;
		} else if (!dateTime.equals(other.dateTime))
			return false;
		if (id == null) {
			if (other.id != null)
				return false;
		} else if (!id.equals(other.id))
			return false;
		return true;
	}

	/* (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		return "Cve [id=" + id + ", severity=" + severity + ", category=" + category + ", products=" + products
				+ ", description=" + description + ", dateTime=" + dateTime + "]";
	}
}