
package com.yebba.cveservice.pojo.high;

import com.google.gson.annotations.Expose;
import com.google.gson.annotations.SerializedName;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class CveDef {

    @SerializedName("took")
    @Expose
    private Integer took;
    @SerializedName("timed_out")
    @Expose
    private Boolean timedOut;
    @SerializedName("_shards")
    @Expose
    private Shards shards;
    @SerializedName("hits")
    @Expose
    private Hits hits;

    /**
     * No args constructor for use in serialization
     * 
     */
    public CveDef() {
    }

    /**
     * 
     * @param hits
     * @param shards
     * @param timedOut
     * @param took
     */
    public CveDef(Integer took, Boolean timedOut, Shards shards, Hits hits) {
        super();
        this.took = took;
        this.timedOut = timedOut;
        this.shards = shards;
        this.hits = hits;
    }

    public Integer getTook() {
        return took;
    }

    public void setTook(Integer took) {
        this.took = took;
    }

    public Boolean getTimedOut() {
        return timedOut;
    }

    public void setTimedOut(Boolean timedOut) {
        this.timedOut = timedOut;
    }

    public Shards getShards() {
        return shards;
    }

    public void setShards(Shards shards) {
        this.shards = shards;
    }

    public Hits getHits() {
        return hits;
    }

    public void setHits(Hits hits) {
        this.hits = hits;
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).append("took", took).append("timedOut", timedOut).append("shards", shards).append("hits", hits).toString();
    }

    @Override
    public int hashCode() {
        return new HashCodeBuilder().append(hits).append(shards).append(timedOut).append(took).toHashCode();
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof CveDef) == false) {
            return false;
        }
        CveDef rhs = ((CveDef) other);
        return new EqualsBuilder().append(hits, rhs.hits).append(shards, rhs.shards).append(timedOut, rhs.timedOut).append(took, rhs.took).isEquals();
    }

}
