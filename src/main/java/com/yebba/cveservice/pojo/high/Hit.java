
package com.yebba.cveservice.pojo.high;

import com.google.gson.annotations.Expose;
import com.google.gson.annotations.SerializedName;
import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

public class Hit {

    @SerializedName("_index")
    @Expose
    private String index;
    @SerializedName("_type")
    @Expose
    private String type;
    @SerializedName("_id")
    @Expose
    private String id;
    @SerializedName("_score")
    @Expose
    private Double score;
    @SerializedName("_source")
    @Expose
    private Source source;

    /**
     * No args constructor for use in serialization
     * 
     */
    public Hit() {
    }

    /**
     * 
     * @param id
     * @param index
     * @param source
     * @param score
     * @param type
     */
    public Hit(String index, String type, String id, Double score, Source source) {
        super();
        this.index = index;
        this.type = type;
        this.id = id;
        this.score = score;
        this.source = source;
    }

    public String getIndex() {
        return index;
    }

    public void setIndex(String index) {
        this.index = index;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public Double getScore() {
        return score;
    }

    public void setScore(Double score) {
        this.score = score;
    }

    public Source getSource() {
        return source;
    }

    public void setSource(Source source) {
        this.source = source;
    }

    @Override
    public String toString() {
        return new ToStringBuilder(this).append("index", index).append("type", type).append("id", id).append("score", score).append("source", source).toString();
    }

    @Override
    public int hashCode() {
        return new HashCodeBuilder().append(id).append(index).append(source).append(score).append(type).toHashCode();
    }

    @Override
    public boolean equals(Object other) {
        if (other == this) {
            return true;
        }
        if ((other instanceof Hit) == false) {
            return false;
        }
        Hit rhs = ((Hit) other);
        return new EqualsBuilder().append(id, rhs.id).append(index, rhs.index).append(source, rhs.source).append(score, rhs.score).append(type, rhs.type).isEquals();
    }

}
