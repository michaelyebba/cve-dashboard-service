/**
 * 
 */
package com.yebba.cveservice.dao;

import java.util.List;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Collectors;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.yebba.cveservice.pojo.high.CveDef;
import com.yebba.cveservice.pojo.high.Hit;
import com.yebba.cveservice.pojo.high.Source;

/**
 * Repository class 
 *  
 * @author myebba
 * @ see https://stackoverflow.com/questions/29273705/how-to-paginate-a-list-of-objects-in-java-8
 *
 */
@Repository
public class CveRepository {
	
	private Log log = LogFactory.getLog(CveRepository.class);
	
	@Autowired
	private CveJsonDataSource cveDataSource;
		
	/**
	 * Returns all objects from the CVE database
	 * 
	 * @return
	 */
	public CveDef findAll() {
		try {
			return cveDataSource.fetchAll();	
		} catch (Exception e) {
			log.error(e.getMessage());
			throw new CveDaoException(e);
		}
		
	}
	
	/**
	 * Returns a List of Hit objects by severity
	 * 
	 * TODO get gson streaming to work
	 * 
	 * @param severity
	 * @return
	 */
	public List<Hit> findBySeverity(String severity) {

		try {
			CveDef cve = findAll();
						
			return cve.getHits().getHits().stream()
					.filter(h -> h.getSource() != null)
					.filter(h -> h.getSource().getCvssAccessComplexity() != null)
					.filter(h -> h.getSource().getCvssAccessComplexity().equals(severity)).collect(Collectors.toList());
			
		} catch (Exception e) {
			log.error(e.getMessage());
			throw new CveDaoException(e);			
		}
	}
	
	/*
	 * Utility unction that returns a predicate that maintains state about what it's seen 
	 * previously, and that returns whether the given element was seen for the first time.
	 * 
	 * @param keyExtractor
	 * @return
	 */
	private static <T> Predicate<T> distinctByKey(Function<? super T, ?> keyExtractor) {
	    Set<Object> seen = ConcurrentHashMap.newKeySet();
	    return t -> seen.add(keyExtractor.apply(t));
	}
	
	/**
	 * List out the unique severities
	 * TODO rewrite using distinct()
	 * 
	 * @return
	 */
	public List<String> selectDistinctSeverities() {
		try {
			CveDef cve = findAll();
						
			return cve.getHits().getHits().stream()
					.filter(h -> h.getSource() != null && h.getSource().getCvssAccessComplexity() != null)
					.map(s -> s.getSource())
					.filter(distinctByKey(Source::getCvssAccessComplexity))
					.map(Source::getCvssAccessComplexity)
					.collect(Collectors.toList());
			
		} catch (Exception e) {
			log.error(e.getMessage());
			throw new CveDaoException(e);			
		}
	}
	
	/**
	 * Returns a Hit based on the id
	 * 
	 * @param id
	 * @return
	 */
	public Hit findById(String id) {
		try {
			CveDef cve = findAll();
						
			return cve.getHits().getHits().stream()
					.filter(h -> h.getSource() != null)
					.filter(h -> h.getId() != null)
					.filter(h -> h.getId().equals(id))
					.findFirst()
					.get();
			
		} catch (Exception e) {
			log.error(e.getMessage());
			throw new CveDaoException(e);			
		}
	}	
	
	/**
	 * Searches the CVE repostitory by product name
	 * 
	 * @param productName
	 * @return
	 */
	public List<Hit> searchByProductName(String productName) {
		try {
			CveDef cve = findAll();
						
			return cve.getHits().getHits().stream()
					.filter(h -> h.getSource() != null)
					.filter(h -> h.getSource().getProduct().stream().anyMatch(p -> p.contains(productName)))
					.collect(Collectors.toList());
					
			
		} catch (Exception e) {
			log.error(e.getMessage());
			throw new CveDaoException(e);			
		}		
	}
}