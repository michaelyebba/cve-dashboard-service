/**
 * 
 */
package com.yebba.cveservice.services;

import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.yebba.cveservice.dao.CveRepository;
import com.yebba.cveservice.model.Cve;

/**
 * Service layer that transforms Elasticsearch format into clean JSON format 
 * for easier client-side consumption
 * 
 * @author myebba
 *
 */
@Service
public class CveService {
	
	private static final Log log = LogFactory.getLog(CveService.class);
	
	@Autowired
	private CveRepository cveRepository;
	
	/**
	 * Fetches a list of all cves in the cveDataSource and applies transformation to Hit objects then sort by date.
	 * 
	 * @return
	 */
	public List<Cve> getAllCves() {
		
		log.debug("Returning all Cves from the service layer");
		List<Cve> cves = cveRepository.findAll().getHits().getHits().stream()
				.map(CveTransformer::transform)
				.filter(Objects::nonNull)
				.sorted((c1, c2)->c1.getFormattedDate().compareTo(c2.getFormattedDate()))
				.collect(Collectors.toList());
		
		return cves;
	}

	/**
	 * Fetches a list of cves for the given size ordered by date.
	 * 
	 * @param size
	 * @return
	 */
	public List<Cve> getAllCves(Integer size) {
		log.debug("Returning all Cves from the service layer; maxSize=" + size);
		return getAllCves().stream().limit(size).collect(Collectors.toList());
	}
	
	/**
	 * Fetches a list of cves for the given severity ordered by date.
	 * 
	 * @param severity
	 * @return
	 */
	public List<Cve> getCvesBySeverity(String severity) {
		log.debug("Returning all Cves from the service layer with a severity of " + severity);
		List<Cve> cves = cveRepository.findBySeverity(severity).stream()
				.map(CveTransformer::transform)
				.filter(Objects::nonNull)
				.sorted((c1, c2)->c1.getFormattedDate().compareTo(c2.getFormattedDate()))
				.collect(Collectors.toList());
		return cves;
	}
	
	/**
	 * Fetches a list of cves for the given size and severity ordered by date.
	 * 
	 * @param severity
	 * @param size
	 * @return
	 */
	public List<Cve> getCvesBySeverity(String severity, Integer size) {
		log.debug("Returning all Cves from the service layer with a severity of " + severity + "; maxSize=" + size);
		return getCvesBySeverity(severity).stream().limit(size).collect(Collectors.toList());
	}
	
	/**
	 * Returns a cve record given the id.
	 * 
	 * @param id
	 * @return
	 */
	public Cve getCveById(String id) {
		log.debug("Return cve with id=" + id);
		return CveTransformer.transform(cveRepository.findById(id));
	}
	
	/**
	 * Returns a list of cves for a given product ordered by date.
	 * 
	 * @param product
	 * @return
	 */
	public List<Cve> getCvesByProduct(String product) {
		log.debug("Returning all Cves from the service layer containing a product name of " + product);
		List<Cve> cves = cveRepository.searchByProductName(product).stream()
				.map(CveTransformer::transform)
				.filter(Objects::nonNull)
				.sorted((c1, c2)->c1.getFormattedDate().compareTo(c2.getFormattedDate()))
				.collect(Collectors.toList());
		return cves;
	}
	
	/**
	 * Returns a list of cves for a given product and size ordered by date.
	 * 
	 * @param product
	 * @param size
	 * @return
	 */
	public List<Cve> getCvesByProduct(String product, Integer size) {
		log.debug("Returning all Cves from the service layer containing a product name of " + product + "; maxSize=" + size);
		return getCvesByProduct(product).stream().limit(size).collect(Collectors.toList());
	}
	
	/**
	 * Returns a distinct list of severities from the cve data source
	 * @return
	 */
	public List<String> getSeverities() {
		log.debug("Returning a list of distinct severities in the service layer");
		return cveRepository.selectDistinctSeverities();
	}
}