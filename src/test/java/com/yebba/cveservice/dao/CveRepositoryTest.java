/**
 * 
 */
package com.yebba.cveservice.dao;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
import static org.mockito.Mockito.when;

import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import com.yebba.cveservice.CveTestUtils;
import com.yebba.cveservice.pojo.high.CveDef;
import com.yebba.cveservice.pojo.high.Hit;

/**
 * Unit tests for CveRepository
 * 
 * @author myebba
 *
 */
@RunWith(MockitoJUnitRunner.class)
public class CveRepositoryTest {
		
	@Mock
	private CveJsonDataSource dataSource;
	
	@InjectMocks
	private CveRepository repo;
	
	@Before
	public void setupDataSource() {
		try {
			when(dataSource.fetchAll()).thenReturn(CveTestUtils.getTestData());
		} catch (Exception e) {
			fail(e.getMessage());
		}
	}
	
	@Test
	public void testFindAll_NotNull() {		
		CveDef all = repo.findAll();
		assertNotNull(all);
		assertNotNull(all.getHits());
		assertNotNull(all.getHits().getHits());
		assertEquals(7, all.getHits().getHits().size());
	}
	
	@Test
	public void testSelectDistinctSeverities_SizeEquals3() {
		List<String> severities = repo.selectDistinctSeverities();
		assertNotNull(severities);
		assertEquals(3, severities.size());
	}
	
	@Test
	public void testSelectDistinctSeverities_HighMediumLow() {
		List<String> severities = repo.selectDistinctSeverities();
		assertNotNull(severities);
		assertTrue(severities.contains("HIGH"));
		assertTrue(severities.contains("MEDIUM"));
		assertTrue(severities.contains("LOW"));
	}
	
		
	@Test
	public void testFindById_NotNullAndIdsAreEqual() {
		Hit hit = repo.findById("CVE-2019-0591");
		assertNotNull(hit);
		assertEquals("CVE-2019-0591", hit.getId());
	}
	
	@Test(expected=CveDaoException.class)
	public void testFindById_DoesNotExist() {
		repo.findById("ABCDEFG");
	}
		
	@Test
	public void testSearchByProductName_Matched() {
		List<Hit> hits = repo.findByProductName("microsoft");
		assertNotNull(hits);
		assertEquals(2, hits.size());
		for (Hit hit : hits) {
			assertTrue(hit.getSource().getProduct().contains("microsoft"));
		}
		
		hits = repo.findByProductName("oracle");
		assertNotNull(hits);
		assertEquals(1, hits.size());
		for (Hit hit : hits) {
			assertTrue(hit.getSource().getProduct().contains("oracle"));
		}
		
		hits = repo.findByProductName("google");
		assertNotNull(hits);
		assertEquals(2, hits.size());
		for (Hit hit : hits) {
			assertTrue(hit.getSource().getProduct().contains("google"));
		}
		
		hits = repo.findByProductName("openbsd");
		assertNotNull(hits);
		assertEquals(1, hits.size());
		for (Hit hit : hits) {
			assertTrue(hit.getSource().getProduct().contains("openbsd"));
		}
	}
	
	
	@Test
	public void testSearchByProductName_NotMatched() {
		List<Hit> hits = repo.findByProductName("apache");
		assertNotNull(hits);
		assertEquals(0, hits.size());
	}
	
	@Test
	public void testFindBySeverity_Matched() {
		List<Hit> hits = repo.findBySeverity("HIGH");
		assertNotNull(hits);
		assertEquals(2, hits.size());
		for (Hit hit : hits) {
			assertTrue(hit.getSource().getCvssAccessComplexity().equals("HIGH"));
		}
		
		hits = repo.findBySeverity("MEDIUM");
		assertNotNull(hits);
		assertEquals(2, hits.size());
		for (Hit hit : hits) {
			assertTrue(hit.getSource().getCvssAccessComplexity().equals("MEDIUM"));
		}	
		
		
		hits = repo.findBySeverity("LOW");
		assertNotNull(hits);
		assertEquals(2, hits.size());
		for (Hit hit : hits) {
			assertTrue(hit.getSource().getCvssAccessComplexity().equals("LOW"));
		}	
	}
	
	@Test
	public void testFindBySeverity_NotMatched() {
		List<Hit> hits = repo.findBySeverity("UNKNOWN");
		assertNotNull(hits);
		assertEquals(0, hits.size());
	}
}