/**
 * 
 */
package com.yebba.cveservice.dao;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.List;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import com.yebba.cveservice.pojo.high.CveDef;
import com.yebba.cveservice.pojo.high.Hit;
import com.yebba.cveservice.pojo.high.Hits;
import com.yebba.cveservice.pojo.high.Source;

/**
 * Unit tests for CveRepository
 * 
 * @author myebba
 *
 */
@RunWith(MockitoJUnitRunner.class)
public class CveRepositoryTest {
		
	@Mock
	private CveJsonDataSource dataSource;
	
	@InjectMocks
	private CveRepository repo;
	
	@Before
	public void setupDataSource() {
		try {
			when(dataSource.fetchAll()).thenReturn(this.fetchAll());
		} catch (Exception e) {
			fail(e.getMessage());
		}
	}
	
	@Test
	public void testFindAll_NotNull() {		
		CveDef all = repo.findAll();
		assertNotNull(all);
		assertNotNull(all.getHits());
		assertNotNull(all.getHits().getHits());
		assertEquals(6, all.getHits().getHits().size());
	}
	
	@Test
	public void testSelectDistinctSeverities_SizeEquals3() {
		List<String> severities = repo.selectDistinctSeverities();
		assertNotNull(severities);
		assertEquals(3, severities.size());
	}
	
	@Test
	public void testSelectDistinctSeverities_HighMediumLow() {
		List<String> severities = repo.selectDistinctSeverities();
		assertNotNull(severities);
		assertTrue(severities.contains("HIGH"));
		assertTrue(severities.contains("MEDIUM"));
		assertTrue(severities.contains("LOW"));
	}
	
		
	@Test
	public void testFindById_NotNullAndIdsAreEqual() {
		Hit hit = repo.findById("CVE-2019-0591");
		assertNotNull(hit);
		assertEquals("CVE-2019-0591", hit.getId());
	}
	
	@Test(expected=CveDaoException.class)
	public void testFindById_DoesNotExist() {
		repo.findById("ABCDEFG");
	}
		
	@Test
	public void testSearchByProductName_Matched() {
		List<Hit> hits = repo.searchByProductName("microsoft");
		assertNotNull(hits);
		assertEquals(2, hits.size());
		for (Hit hit : hits) {
			assertTrue(hit.getSource().getProduct().contains("microsoft"));
		}
		
		hits = repo.searchByProductName("oracle");
		assertNotNull(hits);
		assertEquals(1, hits.size());
		for (Hit hit : hits) {
			assertTrue(hit.getSource().getProduct().contains("oracle"));
		}
		
		hits = repo.searchByProductName("google");
		assertNotNull(hits);
		assertEquals(2, hits.size());
		for (Hit hit : hits) {
			assertTrue(hit.getSource().getProduct().contains("google"));
		}
		
		hits = repo.searchByProductName("openbsd");
		assertNotNull(hits);
		assertEquals(1, hits.size());
		for (Hit hit : hits) {
			assertTrue(hit.getSource().getProduct().contains("openbsd"));
		}
	}
	
	
	@Test
	public void testSearchByProductName_NotMatched() {
		List<Hit> hits = repo.searchByProductName("apache");
		assertNotNull(hits);
		assertEquals(0, hits.size());
	}
	
	@Test
	public void testFindBySeverity_Matched() {
		List<Hit> hits = repo.findBySeverity("HIGH");
		assertNotNull(hits);
		assertEquals(2, hits.size());
		for (Hit hit : hits) {
			assertTrue(hit.getSource().getCvssAccessComplexity().equals("HIGH"));
		}
		
		hits = repo.findBySeverity("MEDIUM");
		assertNotNull(hits);
		assertEquals(2, hits.size());
		for (Hit hit : hits) {
			assertTrue(hit.getSource().getCvssAccessComplexity().equals("MEDIUM"));
		}	
		
		
		hits = repo.findBySeverity("LOW");
		assertNotNull(hits);
		assertEquals(2, hits.size());
		for (Hit hit : hits) {
			assertTrue(hit.getSource().getCvssAccessComplexity().equals("LOW"));
		}	
	}
	
	@Test
	public void testFindBySeverity_NotMatched() {
		List<Hit> hits = repo.findBySeverity("UNKNOWN");
		assertNotNull(hits);
		assertEquals(0, hits.size());
	}

	/*
	 * Test data
	 */
	private CveDef fetchAll() {
		CveDef all = new CveDef();
		Hits hits = new Hits();
		List<Hit> hitList = new ArrayList<Hit>();
		hits.setHits(hitList);
		
		// create 6 hits for testing
		Hit hit1 = new Hit();
		hit1.setId("CVE-2019-0591");
		Source source1 = new Source();
		source1.setCvssAccessComplexity("HIGH");
		source1.setCvssAccessVector("NETWORK");
		source1.setYear(2019);
		source1.setCvssConfidentialityImpact("COMPLETE");
		
		List<String> products1 = new ArrayList<String>();
		products1.add("microsoft");
		source1.setProduct(products1);
		hit1.setSource(source1);
		hits.getHits().add(hit1);
		
		// hit 2
		Hit hit2 = new Hit();
		hit2.setId("CVE-2019-2438");
		Source source2 = new Source();
		source2.setCvssAccessComplexity("MEDIUM");
		source2.setCvssAccessVector("NETWORK");
		source2.setYear(2019);
		source2.setCvssConfidentialityImpact("COMPLETE");
		
		List<String> products2 = new ArrayList<String>();
		products2.add("oracle");
		source2.setProduct(products2);
		hit2.setSource(source2);
		hits.getHits().add(hit2);
		
		// hit 3
		Hit hit3 = new Hit();
		hit3.setId("CVE-2019-0607");
		Source source3 = new Source();
		source3.setCvssAccessComplexity("LOW");
		source3.setCvssAccessVector("NETWORK");
		source3.setYear(2019);
		source3.setCvssConfidentialityImpact("COMPLETE");
		
		List<String> products3 = new ArrayList<String>();
		products3.add("google");
		source3.setProduct(products3);
		hit3.setSource(source3);
		hits.getHits().add(hit3);
		
		// hit 4
		Hit hit4 = new Hit();
		hit4.setId("CVE-2019-6110");
		Source source4 = new Source();
		source4.setCvssAccessComplexity("HIGH");
		source4.setCvssAccessVector("NETWORK");
		source4.setYear(2019);
		source4.setCvssConfidentialityImpact("COMPLETE");
		
		List<String> products4 = new ArrayList<String>();
		products4.add("openbsd");
		source4.setProduct(products4);
		hit4.setSource(source4);
		hits.getHits().add(hit4);
		
		// hit 5
		Hit hit5 = new Hit();
		hit5.setId("CVE-2019-0567");
		Source source5 = new Source();
		source5.setCvssAccessComplexity("MEDIUM");
		source5.setCvssAccessVector("NETWORK");
		source5.setYear(2019);
		source5.setCvssConfidentialityImpact("COMPLETE");
		
		List<String> products5 = new ArrayList<String>();
		products5.add("microsoft");
		source5.setProduct(products5);
		hit5.setSource(source5);
		hits.getHits().add(hit5);
		
		// hit 6
		Hit hit6 = new Hit();
		hit6.setId("CVE-2019-0634");
		Source source6 = new Source();
		source6.setCvssAccessComplexity("LOW");
		source6.setCvssAccessVector("NETWORK");
		source6.setYear(2019);
		source6.setCvssConfidentialityImpact("COMPLETE");
		
		List<String> products6 = new ArrayList<String>();
		products6.add("google");
		source6.setProduct(products6);
		hit6.setSource(source6);
		hits.getHits().add(hit6);
		
		all.setHits(hits);
		
		return all;
	}
}