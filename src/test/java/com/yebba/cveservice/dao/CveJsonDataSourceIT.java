package com.yebba.cveservice.dao;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.junit.MockitoJUnitRunner;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;
import org.springframework.test.util.ReflectionTestUtils;

import com.yebba.cveservice.pojo.high.CveDef;

/**
 * Integration test for CveJsonDataSource
 * 
 * @author myebba
 *
 */
@RunWith(MockitoJUnitRunner.class)
public class CveJsonDataSourceIT {
	
	private CveJsonDataSource ds;
		
	private static final String FILE_EXISTS = "data/cve-data-2019.json";
	
	private static final String FILE_DOES_NOT_EXIST = "data/cve-data-2019.jsonx";
	
	private static final String JSON_FILE_FIELD_NAME = "jsonFile";
	
	@Before
	public void setUp() throws Exception {
		ds = new CveJsonDataSource();
		final Resource jsonFile = new ClassPathResource(FILE_EXISTS);
		assertTrue(jsonFile.getFile().exists());
		ReflectionTestUtils.setField(ds, JSON_FILE_FIELD_NAME, jsonFile);
	}
	
	@Test
	public void testFetchAll_NotNull() {
		try {
			assertNotNull(ds);
			CveDef cve = ds.fetchAll();
			assertNotNull(cve);
		} catch (Exception e) {
			fail(e.getMessage());
		}
	}
	
	
	@Test(expected=CveDaoException.class)
	public void testFetchAll_FileDoesNotExist() {
		CveJsonDataSource cveDataSource = new CveJsonDataSource();
		final Resource jsonFile = new ClassPathResource(FILE_DOES_NOT_EXIST);
		ReflectionTestUtils.setField(cveDataSource, JSON_FILE_FIELD_NAME, jsonFile);
		cveDataSource.fetchAll();
	}
		
	@Test
	public void testFetchAll_HitsGt_0() {
		try {
			CveDef cve = ds.fetchAll();
			assertNotNull(cve);
			assertNotNull(cve.getHits());
			assertNotNull(cve.getHits().getTotal());
			assertTrue(cve.getHits().getTotal() > 0);
		} catch (Exception e) {
			e.printStackTrace();
			fail(e.getMessage());						
		}
	}
	
	@Test
	public void testFetchAll_TotalEqHits() {
		try {
			CveDef cve = ds.fetchAll();
			assertNotNull(cve);
			assertNotNull(cve.getHits());
			assertNotNull(cve.getHits().getTotal());
			assertNotNull(cve.getHits().getHits());
			assertEquals(cve.getHits().getTotal().intValue(), cve.getHits().getHits().size());
		} catch (Exception e) {
			e.printStackTrace();
			fail(e.getMessage());						
		}		
	}
}