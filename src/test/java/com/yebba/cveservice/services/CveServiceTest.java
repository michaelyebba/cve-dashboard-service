/**
 * 
 */
package com.yebba.cveservice.services;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.when;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.MockitoJUnitRunner;

import com.yebba.cveservice.CveTestUtils;
import com.yebba.cveservice.dao.CveRepository;
import com.yebba.cveservice.model.Cve;
import com.yebba.cveservice.pojo.high.Hit;

/**
 * Unit test for the CVE Service
 * 
 * @author myebba
 *
 */
@RunWith(MockitoJUnitRunner.class)
public class CveServiceTest {
	
	@Mock
	private CveRepository cveRepository;
	
	@InjectMocks
	private CveService cveService;
	
	@Test
	public void testGetFormattedDate_ValidDateTime() {
		Cve cve = new Cve();
		cve.setDateTime("2019-01-17T21:57:10.733-05:00");
		assertNotNull(cve.getFormattedDate());
	}
	
	@Test
	public void testGetFormattedDate_InvalidDateTime() {
		Cve cve = new Cve();
		cve.setDateTime("2019-01-17T21:57:10.733");
		assertNotNull(cve.getFormattedDate());		
		assertEquals(new Date(0), cve.getFormattedDate());
	}
	
	@Test
	public void testGetFormattedDate_NullDateTime() {
		Cve cve = new Cve();
		cve.setDateTime(null);
		assertNotNull(cve.getFormattedDate());		
		assertEquals(new Date(0), cve.getFormattedDate());		
	}
	
	@Test
	public void testGetAllCves() {
		when(cveRepository.findAll()).thenReturn(CveTestUtils.getTestData());
		List<Cve> cves = cveService.getAllCves();
		assertNotNull(cves);
		assertTrue(cves.size() > 0);
	}
	
	@Test
	public void testGetAllCves_MaxSize3() {
		when(cveRepository.findAll()).thenReturn(CveTestUtils.getTestData());
		List<Cve> cves = cveService.getAllCves(3);
		assertNotNull(cves);
		assertEquals(3, cves.size());
	}
	
	@Test
	public void testGetCveById_NotNull() {
		when(cveRepository.findById("CVE-2019-0591")).thenReturn(CveTestUtils.getHitSourceNotNull());
		Cve cve = cveService.getCveById("CVE-2019-0591");
		assertNotNull(cve);
		assertEquals("CVE-2019-0591", cve.getId());
		assertEquals("HIGH", cve.getSeverity());
		assertEquals("NETWORK", cve.getCategory());
		assertEquals(2019, cve.getYear().intValue());
		assertEquals(1, cve.getProducts().size());
	}
	
	@Test
	public void testGetCveById_IsNull() {
		when(cveRepository.findById("CVE-2019-0591x")).thenReturn(null);
		Cve cve = cveService.getCveById("CVE-2019-0591x");
		assertNull(cve);
	}
	
	@Test
	public void testGetCveById_SourceIsNull() {
		when(cveRepository.findById("Nosource")).thenReturn(CveTestUtils.getHitSourceNull());
		Cve cve = cveService.getCveById("Nosource");
		assertNull(cve);
	}
	
	@Test
	public void testGetCvesByProduct_Match() {
		List<Hit> matchingHits = new ArrayList<Hit>();
		matchingHits.add(CveTestUtils.getTestData().getHits().getHits().get(0));
		matchingHits.add(CveTestUtils.getTestData().getHits().getHits().get(4));
		
		when(cveRepository.findByProductName("microsoft")).thenReturn(matchingHits);
		List<Cve> cves = cveService.getCvesByProduct("microsoft");
		assertNotNull(cves);
		assertEquals(2, cves.size());
		
		cves.stream().forEach(c -> assertTrue(c.getProducts().contains("microsoft")));
	}
	
	@Test
	public void testGetCvesByProduct_Match_MaxSize_LtResultSize() {
		List<Hit> matchingHits = new ArrayList<Hit>();
		matchingHits.add(CveTestUtils.getTestData().getHits().getHits().get(0));
		matchingHits.add(CveTestUtils.getTestData().getHits().getHits().get(4));
		
		when(cveRepository.findByProductName("microsoft")).thenReturn(matchingHits);
		List<Cve> cves = cveService.getCvesByProduct("microsoft", 1);
		assertNotNull(cves);
		assertEquals(1, cves.size());
		
		cves.stream().forEach(c -> assertTrue(c.getProducts().contains("microsoft")));	
	}
	
	@Test
	public void testGetCvesByProduct_Match_MaxSize_GtResultSize() {
		List<Hit> matchingHits = new ArrayList<Hit>();
		matchingHits.add(CveTestUtils.getTestData().getHits().getHits().get(0));
		matchingHits.add(CveTestUtils.getTestData().getHits().getHits().get(4));
		
		when(cveRepository.findByProductName("microsoft")).thenReturn(matchingHits);
		List<Cve> cves = cveService.getCvesByProduct("microsoft", 3);
		assertNotNull(cves);
		assertEquals(2, cves.size());
		
		cves.stream().forEach(c -> assertTrue(c.getProducts().contains("microsoft")));	
	}
	
	@Test
	public void testGetCvesBySeverity_Match() {
		List<Hit> matchingHits = new ArrayList<Hit>();
		matchingHits.add(CveTestUtils.getTestData().getHits().getHits().get(0));
		matchingHits.add(CveTestUtils.getTestData().getHits().getHits().get(3));		
		
		when(cveRepository.findBySeverity("HIGH")).thenReturn(matchingHits);
		List<Cve> cves = cveService.getCvesBySeverity("HIGH");
		assertNotNull(cves);
		assertEquals(2, cves.size());
		
		cves.stream().forEach(c -> assertTrue(c.getSeverity().equals("HIGH")));	
	}
	
	@Test
	public void testGetCvesBySeverity_Match_MaxSize_LtResultSize() {
		List<Hit> matchingHits = new ArrayList<Hit>();
		matchingHits.add(CveTestUtils.getTestData().getHits().getHits().get(0));
		matchingHits.add(CveTestUtils.getTestData().getHits().getHits().get(3));		
		
		when(cveRepository.findBySeverity("HIGH")).thenReturn(matchingHits);
		List<Cve> cves = cveService.getCvesBySeverity("HIGH", 1);
		assertNotNull(cves);
		assertEquals(1, cves.size());
		
		cves.stream().forEach(c -> assertTrue(c.getSeverity().equals("HIGH")));	
	}
	
	@Test
	public void testGetCvesBySeverity_Match_MaxSize_GtResultSize() {
		List<Hit> matchingHits = new ArrayList<Hit>();
		matchingHits.add(CveTestUtils.getTestData().getHits().getHits().get(0));
		matchingHits.add(CveTestUtils.getTestData().getHits().getHits().get(3));		
		
		when(cveRepository.findBySeverity("HIGH")).thenReturn(matchingHits);
		List<Cve> cves = cveService.getCvesBySeverity("HIGH", 3);
		assertNotNull(cves);
		assertEquals(2, cves.size());
		
		cves.stream().forEach(c -> assertTrue(c.getSeverity().equals("HIGH")));	
	}
	
	@Test
	public void testGetSeverities_NotNull() {
		List<String> severities = new ArrayList<>();
		severities.add("HIGH");
		severities.add("MEDIUM");
		severities.add("LOW");
		when(cveRepository.selectDistinctSeverities()).thenReturn(severities);
		assertNotNull(cveService.getSeverities());
	}
	
	@Test
	public void testGetProductSummary_OneProduct() {
		List<String> products = new ArrayList<>();
		products.add("microsoft");
		Cve cve = new Cve();
		cve.setProducts(products);
		
		assertEquals("microsoft", cve.getProductSummary());	
	}
	
	@Test
	public void testGetProductSummary_GtOneProduct() {
		List<String> products = new ArrayList<>();
		products.add("microsoft 1");
		products.add("microsoft 2");
		products.add("microsoft 3");
		products.add("microsoft 4");
		products.add("microsoft 4");
		Cve cve = new Cve();
		cve.setProducts(products);
		
		assertEquals("microsoft 1 (plus 4 more)", cve.getProductSummary());	
	}
	
	@Test
	public void testGetProductSummary_NoProducts() {
		Cve cve = new Cve();
		assertEquals("No products", cve.getProductSummary());
	}
}