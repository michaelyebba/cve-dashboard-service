/**
 * 
 */
package com.yebba.cveservice.services;

import static org.assertj.core.api.Assertions.fail;
import static org.hamcrest.Matchers.hasSize;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.client.match.MockRestRequestMatchers.content;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.util.ArrayList;
import java.util.List;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;

import com.yebba.cveservice.CveTestUtils;

/**
 * Integration test for the CVE Service Rest Endpoint.
 * 
 * @author myebba
 *
 */
@RunWith(SpringRunner.class)
@WebMvcTest(CveRestController.class)
public class CveRestControllerIT {

	@Autowired
	MockMvc mvc;
	
	@MockBean
	private CveService cveService;
	
	@Test
	public void testGetSeverities() {
	
		List<String> severities = new ArrayList<>();
		severities.add("HIGH");
		severities.add("MEDIUM");
		severities.add("LOW");
		
		when(cveService.getSeverities()).thenReturn(severities);
		
		try {
			mvc.perform(get("/api/severities").contentType(MediaType.APPLICATION_JSON))
				.andExpect(status().isOk())
				.andExpect(jsonPath("$", hasSize(3)))
				.andReturn();			
		} catch (Exception e) {
			e.printStackTrace();
			fail(e.getMessage());
		}
	}	
	
	@Test
	public void testGetCveById() {
		
		when(cveService.getCveById("CVE-2019-0591")).thenReturn(CveTestUtils.getCve());
		try {
			mvc.perform(get("/api/cves/CVE-2019-0591").contentType(MediaType.APPLICATION_JSON))
				.andExpect(status().isOk())
				.andExpect(jsonPath("$.id").value("CVE-2019-0591"))
				.andExpect(jsonPath("$.severity").value("HIGH"))
				.andExpect(jsonPath("$.category").value("NETWORK"))
				.andExpect(jsonPath("$.year").value("2019"))
				.andReturn();
		} catch (Exception e) {
			e.printStackTrace();
			fail(e.getMessage());
		}
	}
	
	@Test
	public void testGetAllCves() {
				
		when(cveService.getAllCves(5)).thenReturn(CveTestUtils.getCves().subList(0, 5));
		try {
			mvc.perform(get("/api/cves")
					.param("maxSize", "5")
					.contentType(MediaType.APPLICATION_JSON))
				.andExpect(status().isOk())
				.andExpect(jsonPath("$", hasSize(5)))
				.andExpect(jsonPath("$[0].id").exists())
				.andReturn();
		} catch (Exception e) {
			e.printStackTrace();
			fail(e.getMessage());
		}
	}
	
	@Test
	public void testSearchProductName( ) {		
		when(cveService.getCvesByProduct("microsoft",10)).thenReturn(CveTestUtils.getCves());
		try {
			mvc.perform(get("/api/cves")
					.param("product", "microsoft")
					.contentType(MediaType.APPLICATION_JSON))
				.andExpect(status().isOk())
				.andExpect(jsonPath("$", hasSize(7)))
				.andExpect(jsonPath("$[0].id").exists())
				.andReturn();
		} catch (Exception e) {
			e.printStackTrace();
			fail(e.getMessage());
		}
	}
	
	@Test
	public void testSearchSeverity( ) {		
		when(cveService.getCvesBySeverity("HIGH",10)).thenReturn(CveTestUtils.getCves());
		try {
			mvc.perform(get("/api/cves")
					.param("severity", "HIGH")
					.contentType(MediaType.APPLICATION_JSON))
				.andExpect(status().isOk())
				.andExpect(jsonPath("$", hasSize(7)))
				.andExpect(jsonPath("$[0].id").exists())
				.andReturn();
		} catch (Exception e) {
			e.printStackTrace();
			fail(e.getMessage());
		}
	}	
}